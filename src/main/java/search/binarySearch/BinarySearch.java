package search.binarySearch;

public class BinarySearch {
    public static int binarySearch(int[] arr, int key) {
        // Устанавливаем нижнюю границу поиска.
        int low = 0;
        // Устанавливаем верхнюю границу поиска.
        int high = arr.length - 1;
        // Выполняем цикл, пока нижняя граница меньше или равна верхней.
        while (low <= high) {
            // Находим средний элемент массива.
            int mid = (low + high) / 2;
            // Если средний элемент равен ключу поиска, возвращаем его индекс.
            if (arr[mid] == key) {
                return mid;
                // Если средний элемент меньше ключа поиска, исключаем левую половину массива из поиска.
            } else if (arr[mid] < key) {
                low = mid + 1;
                // Если средний элемент больше ключа поиска, исключаем правую половину массива из поиска.
            } else {
                high = mid - 1;
            }
        }
        // Если ключ поиска не найден, возвращаем -1.
        return -1;
    }

    public static void main(String[] args) {
        // Определяем отсортированный массив.
        int[] arr = {1, 3, 5, 6, 8, 9};
        // Определяем ключ поиска.
        int key = 6;
        // Выполняем бинарный поиск элемента с ключом в массиве.
        int index = binarySearch(arr, key);
        // Если элемент найден, выводим сообщение об этом.
        if (index != -1) {
            System.out.println("Элемент " + key + " найден на позиции " + index);
            // Если элемент не найден, выводим сообщение об этом.
        } else {
            System.out.println("Элемент " + key + " не найден в массиве.");
        }
    }
}